#include "xx_uv.h"
#include <iostream>
#include <thread>

inline void Host()
{
	xx::MemPool mp;

	// 根据 url 之 path 路由处理函数
	xx::Dict<char const*, std::function<void(xx::UvHttpPeer*)>> pathHandlers(&mp);
	pathHandlers["test"] = [](xx::UvHttpPeer* peer)
	{
		peer->s.Append("{ \"method\":\"", peer->method
			, "\", \"path\":\"", peer->path
			, "\", \"queries\":", peer->queries
			, "\", \"headers\":", peer->headers
			, "\", \"body\":\"", peer->body, "\""
		);
		peer->SendHttpResponse();
	};
	pathHandlers["add_1"] = [](xx::UvHttpPeer* peer)
	{
		if (peer->queries.dataLen == 1 && strcmp(peer->queries[0].first, "value") == 0)
		{
			int value = 0;
			xx::FromString(value, peer->queries[0].second);
			++value;
			peer->s.Append(value);
		}
		else
		{
			peer->s.Append("invalid argument.");
		}
		peer->SendHttpResponse();
	};

	xx::UvLoop loop(&mp);
	auto listener = loop.CreateTcpListener();
	listener->OnCreatePeer = [&pathHandlers, listener]
	{
		auto peer = listener->mempool->Create<xx::UvHttpPeer>(*listener);
		peer->rawData.MPCreate(peer->mempool);
		peer->OnReceiveHttp = [&pathHandlers, peer]
		{
			peer->ParseUrl();
			auto idx = pathHandlers.Find(peer->path);
			if (idx != -1)
			{
				pathHandlers.ValueAt(idx)(peer);
			}
			else
			{
				peer->Release();
			}
		};
		peer->OnError = [peer](uint32_t errorNumber, char const* errorMessage)
		{
			std::cout << errorMessage << std::endl;
		};
		return peer;
	};
	listener->Bind("0.0.0.0", 10080);
	listener->Listen();
	std::cout << "Host...\r\n";
	loop.Run();
}

inline void Test()
{
	xx::MemPool mp;
	xx::UvLoop loop(&mp);

	xx::String txt(&mp);
	int value = 0;
	xx::Stopwatch sw;

	auto client = mp.Create<xx::UvHttpClient>(loop);
	client->OnConnect = [&](auto status)
	{
		if (status)
		{
			std::cout << "connecte failed. status = " << status << std::endl;
			return;
		}
		txt.Clear();
		txt.Append("GET /add_1?value=", value, " HTTP/1.1\r\n""\r\n");
		client->SendBytes(txt.buf, (int)txt.dataLen);
	};
	client->OnReceiveHttp = [&]
	{
		xx::FromString(value, client->body.c_str());
		if (value == 100000)
		{
			std::cout << "elapsed ms = " << sw() << ", value = " << value << std::endl;
		}
		else
		{
			txt.Clear();
			txt.Append("GET /add_1?value=", value, " HTTP/1.1\r\n""\r\n");
			client->SendBytes(txt.buf, (int)txt.dataLen);
		}
	};
	client->SetAddress("127.0.0.1", 10080);
	client->Connect();
	std::cout << "Test...\r\n";
	loop.Run();
}

int main()
{
	std::thread t1([] { Host(); });
	std::thread t2([] { Test(); });
	std::cin.get();
	return 0;
}


//buf = "POST /xxxx HTTP/1.1\r\n"
//        "Transfer-Encoding: chunked\r\n"
//        "\r\n"
//        "1e\r\nall your base are belong to us\r\n"
//        "1e\r\nall your base are belong to us\r\n"
//        "0\r\n"
//	"\r\n";

//buf = "GET /test HTTP/1.1\r\n"
//	"User-Agent: curl/7.18.0 (i486-pc-linux-gnu) libcurl/7.18.0 OpenSSL/0.9.8g zlib/1.2.3.3 libidn/1.1\r\n"
//	"Host: 0.0.0.0=5000\r\n"
//	"Accept: */*\r\n"
//"\r\n";


//buf = "HTTP/1.1 200 OK\r\n"
//	//"Content-Type: text/plain\r\n"
//	"Content-Length: 12\r\n"
//	"\r\n"
//	"hello world\n";







//#include "xx.h"
//int main()
//{
//	xx::MemPool mp_, *mp = &mp_;
//	auto s = mp->Str("asdf");
//	auto refS = s.MakeRef();
//	xx::Dict<xx::String_p, xx::String_r> ss(mp);
//	ss.Add(s, refS);
//	return 0;
//}


//#define _CRT_SECURE_NO_WARNINGS
//
//
//#include "xx_uv.h"
//#include "../pkg/RPC_class.h"
//// 超时值容器
//struct TimeoutData : public xx::UvTimeouterBase
//{
//	TimeoutData(xx::MemPool* const& mp) : xx::UvTimeouterBase(mp) {}
//	int keyIndex = -1;
//	xx::Object_p value;		// todo: 已序列化结果缓存?
//};
//
//void f1()
//{
//	xx::MemPool mp;
//	xx::UvLoop uvLoop(&mp);
//	xx::UvTimeoutManager uvTM(uvLoop, 1000, 21, 20);
//	xx::Dict<xx::String_p, TimeoutData*> cache(&mp);
//	// 模拟放入一个值
//	{
//		// 创建一个超时值容器
//		auto d = mp.MPCreate<TimeoutData>();
//
//		// 设超时回调: 从字典移除后自杀
//		d->OnTimeout = [d, &cache]
//		{
//			cache.RemoveAt(d->keyIndex);
//			std::cout << "timeout. release: " << d->value << std::endl;
//			d->Release();
//		};
//		d->timeouter = &uvTM;
//		uvTM.Add(d);			// 加入超时管理
//
//		// 模拟填值
//		d->value = mp.MPCreatePtr<xx::String>("asdfqwerzxcv");
//
//		// 放入字典, 存下标
//		auto r = cache.Add(mp.MPCreatePtr<xx::String>("a"), d);
//		d->keyIndex = r.index;
//	}
//	// 模拟读取一个值
//	{
//		auto key = mp.MPCreatePtr<xx::String>("a");
//		auto idx = cache.Find(key);
//		if (idx != -1)
//		{
//			auto d = cache.ValueAt(idx);
//			uvTM.AddOrUpdate(d);			// 刷新超时
//
//			std::cout << d->value << std::endl;
//		}
//	}
//
//	//xx::UvTcpListener uvListener(uvLoop);
//	//uvListener.Bind("0.0.0.0", 12345);
//
//	uvLoop.Run();
//}
//
//void f2()
//{
//
//}
//
//int main()
//{
//	f1();
//
//	return 0;
//}





// todo: std::optional 用起来以支持数据库可空字段, 进而统一 db & pkg 生成器
// todo: C# BBuffer 需要增加对 Nullable 的重载
// todo: C# LUA 的生成物需要同步修改

namespace xx { struct Pos {}; }
using Sprite = void*;
using Animation = void*;
using ClientPeer = void*;
#include <xx.h>
#include "../pkg/PKG_class.h"

#define var decltype(auto)
int main()
{
	xx::MemPool::RegisterInternals();
	PKG::AllTypesRegister();
	xx::MemPool mp_, *mp = &mp_;

	var f = mp->MPCreatePtr<PKG::Foo>();
	std::cout << f << std::endl;

	//f->id = 1;
	//f->age = 123;
	//f->floats.MPCreate(mp);
	//f->floats->Add(1.2f);
	//f->floats->Emplace();
	//f->floats->Add(3.4f);

	var bb = mp->MPCreatePtr<xx::BBuffer>();
	bb->WriteRoot(f);
	std::cout << bb << std::endl;

	decltype(f) f2;
	int r = bb->ReadRoot(f2);
	assert(!r);
	std::cout << f2 << std::endl;
	return 0;
}











#pragma execution_character_set("utf-8")
//#include "../pkg/PKG_class.h"

// todo: DictEx Update 函数还需要进一步测试. 看上去有老 HashCode 没被更新的问题

#include "xx_uv.h"

xx::MemPool mp;

template<typename...Args>
void Cout(Args const&...args)
{
	xx::String s(&mp);
	s.Append(args...);
	std::cout << s;
}

struct Foo
{
	int v1, v2;
};

int main2()
{
	xx::DictEx<Foo, decltype(Foo::v1), decltype(Foo::v2)> de(&mp);

	{
		Foo f{ 1, 2 };

		auto r = de.Add(f, f.v1, f.v2);
		Cout(r.success, ", ", r.index, '\n');

		r = de.Add(f, f.v1, f.v2);
		Cout(r.success, ", ", r.index, '\n');	// false
	}

	{
		Foo f{ 2, 3 };

		auto r = de.Add(f, f.v1, f.v2);
		Cout(r.success, ", ", r.index, '\n');

		f.v1 = 3;
		r = de.Add(f, f.v1, f.v2);
		Cout(r.success, ", ", r.index, '\n');	// false
	}

	de.Add(Foo{}, 3, 4);
	de.Add(Foo{}, 4, 5);
	de.Add(Foo{}, 5, 6);
	de.Add(Foo{}, 6, 7);

	Cout("find 0/3, 1/4 : ", de.Find<0>(3), " ", de.Find<1>(4), "\n");

	de.Remove<1>(4);
	assert(de.Find<0>(3) == -1);
	int idx = de.Find<0>(4);
	de.RemoveAt(idx);

	bool ok = de.Update<0>(1, 3);
	assert(ok);

	for (decltype(auto) iv : de)
	{
		Cout("k0: ", de.KeyAt<0>(iv.index), ", k1: ", de.KeyAt<1>(iv.index), ", foo = ", iv.value.v1, ", ", iv.value.v2, "\n");
	}

	return 0;
}

int main()
{
	main2();
	return 0;
}

